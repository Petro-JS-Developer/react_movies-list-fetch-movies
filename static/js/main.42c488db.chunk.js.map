{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","imdbId","className","meta-id","src","alt","href","MoviesList","movies","map","movie","key","FindMovie","setMovies","listMovies","useState","query","setQuery","movieForPreview","setMovie","visibleError","setVisibleError","htmlFor","type","id","placeholder","classnames","value","onChange","event","target","onClick","fetch","then","response","json","result","previewMovies","Object","keys","forEach","length","some","App","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.42c488db.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n  imdbId,\n}) => (\n  <div className=\"card\" meta-id={imdbId}>\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n  imdbId: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const FindMovie = ({ setMovies, listMovies }) => {\n  const BASE_URL = 'http://www.omdbapi.com/?apikey=317f0705';\n  const [query, setQuery] = useState('');\n  const [movieForPreview, setMovie] = useState(null);\n\n  const [visibleError, setVisibleError] = useState(false);\n  const request = title => fetch(`${BASE_URL}&t=${title}`)\n    .then(response => response.json())\n    .then((result) => {\n      const previewMovies = {};\n\n      Object.keys(result).forEach((key) => {\n        switch (key) {\n          case 'Title':\n            previewMovies.title = result[key];\n            break;\n          case 'Plot':\n            previewMovies.description = result[key];\n            break;\n          case 'Poster':\n            previewMovies.imgUrl = result[key];\n            break;\n          case 'imdbID':\n            previewMovies.imdbUrl\n            = `https://www.imdb.com/title/${result[key]}/`;\n            previewMovies.imdbId = result[key];\n            break;\n          default: break;\n        }\n      });\n\n      if (Object.keys(previewMovies).length > 0) {\n        setMovie(previewMovies);\n        setVisibleError(false);\n      } else {\n        setVisibleError(true);\n      }\n    });\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classnames('input', { 'is-danger': visibleError })}\n              value={query}\n              onChange={(event) => {\n                setQuery(event.target.value);\n              }}\n            />\n          </div>\n          {visibleError ? (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          ) : ''}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={() => {\n                request(query);\n              }}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={() => {\n                // eslint-disable-next-line react/prop-types\n                if (\n                  movieForPreview !== null && !listMovies\n                    .some(movie => movie.imdbId === movieForPreview.imdbId)) {\n                  setMovies([...listMovies, movieForPreview]);\n                  setQuery('');\n                }\n              }}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        {movieForPreview !== null ? (\n          <>\n            <h2 className=\"title\">Preview</h2>\n            <MovieCard {...movieForPreview} />\n          </>\n        ) : ''\n        }\n      </div>\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  setMovies: PropTypes.func.isRequired,\n  listMovies: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(data);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie setMovies={setMovies} listMovies={movies} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}